version: 2.1

jobs:
  build-and-deploy:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "SHA256:O4NYjiIJzBVWzi2CWmTZOhbYKqjl2iLofWfzJFcPZ/I"
      - setup_remote_docker
      - run:
          name: Build Application
          command: mvn clean package -DskipTests
      - run:
          name: Build Docker Image
          command: docker build -t $DOCKERHUB_USERNAME/email-tracker-app:latest .
      - run:
          name: Login to Docker Hub
          command: echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Push Docker Image
          command: docker push $DOCKERHUB_USERNAME/email-tracker-app:latest
      - run:
          name: Deploy to EC2
          command: |
            ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST \<< 'EOF'
              
              # Create Docker Compose file
              mkdir -p ~/emailtracker
              cat > ~/emailtracker/docker-compose.yml \<< 'EOT'
              version: '3.8'
              services:
                app:
                  image: $DOCKERHUB_USERNAME/email-tracker-app:latest
                  ports:
                    - "8000:8000"
                  environment:
                    - SPRING_MAIL_USERNAME="$SPRING_MAIL_USERNAME"
                    - SPRING_MAIL_PASSWORD="$SPRING_MAIL_PASSWORD"
                    - GOOGLE_CLIENT_ID="$GOOGLE_CLIENT_ID"
                    - GOOGLE_CLIENT_SECRET="$GOOGLE_CLIENT_SECRET"
                    - GOOGLE_REDIRECT_URI="$GOOGLE_REDIRECT_URI"
                    - DB_USERNAME="$DB_USERNAME"
                    - DB_PASSWORD="$DB_PASSWORD"
                  restart: unless-stopped
                  networks:
                    - app-network
              networks:
                app-network:
                  driver: bridge
              EOT

              # Deploy with Docker Compose
              cd ~/emailtracker
              docker compose down || true
              docker compose pull
              docker compose up -d

              if docker compose ps --services --filter "status=running" | grep -q app; then
                echo "✅ app container is up and healthy"
              else
                echo "❌ app container failed to start" >&2
              exit 1
              fi
            EOF

workflows:
  build-and-deploy-workflow:
    jobs:
      - build-and-deploy
