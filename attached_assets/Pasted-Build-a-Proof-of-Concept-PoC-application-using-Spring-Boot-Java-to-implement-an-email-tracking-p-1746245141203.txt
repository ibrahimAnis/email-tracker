Build a Proof of Concept (PoC) application using Spring Boot (Java) to implement an email tracking pixel system with the following requirements:





Email Sending:





Create a service to send emails to a specified Gmail address using Spring Boot Mail with a Gmail SMTP configuration.



The email should contain:





An HTML body with a tracking pixel (<img> tag) to track email opens.



A clickable link that initiates a Google OAuth 2.0 flow to capture user details.



Use a template for the email content (e.g., Thymeleaf or a simple HTML string).



Tracking Pixel:





Implement an endpoint to serve a 1x1 pixel image (PNG) for tracking email opens.



The pixel URL should use a path parameter for a unique ID (e.g., https://yourserver.com/pixel/unique123) instead of a query parameter to avoid Gmail’s proxy cache.



Generate a unique ID (e.g., UUID) for each email sent and embed it in the pixel URL.



When the pixel is requested:





Capture the User-Agent, IP address, and timestamp (date and time) of the request.



Store this data in a database (use H2 in-memory database for simplicity).



Return a 1x1 transparent PNG image.



Google OAuth Integration:





The email should include a link (e.g., https://yourserver.com/auth/unique123) that redirects to a Google OAuth 2.0 authorization URL.



Use Spring Security OAuth2 Client to handle Google OAuth 2.0 authentication.



After the user authenticates with Google:





Capture the user’s details (e.g., email, name) from the Google OAuth response.



Store these details in the H2 database, associating them with the unique ID from the link.



Redirect the user to a success/landing page (e.g., a simple HTML page saying “Thank you for signing up!”).



Ensure the OAuth link uses the same unique ID as the pixel for tracking correlation.



Data Storage:





Use Spring Data JPA with an H2 in-memory database to store:





Email tracking data: unique ID, recipient email, User-Agent, IP address, timestamp of email open.



OAuth user data: unique ID, Google user email, name, and timestamp of OAuth completion.



Provide an endpoint (e.g., GET /api/tracking) to retrieve all tracking data for debugging.



Additional Requirements:





Use Spring Boot 3.x with Java 17 or later.



Configure Gmail SMTP for email sending (use application.properties for credentials).



Avoid query parameters in the pixel URL to prevent Gmail caching issues.



Ensure the application is secure (e.g., use HTTPS for OAuth redirects in production, but HTTP is fine for localhost PoC).



Include basic error handling (e.g., invalid unique ID, failed OAuth).



Provide a simple REST API to trigger email sending (e.g., POST /api/send-email with recipient email in the request body).



Deliverables:





Complete Spring Boot project structure with:





Maven/Gradle build file.



Java classes for controllers, services, entities, and repositories.



Configuration files (e.g., application.properties).



A sample 1x1 PNG image file for the tracking pixel.



Email template (HTML or Thymeleaf).



Success/landing page HTML.



Instructions to set up and run the application locally.



Example curl commands to test the email sending and data retrieval APIs.



Assumptions:





Gmail SMTP credentials will be provided in application.properties.



Google OAuth 2.0 client ID and secret will be configured in application.properties.



The application runs on localhost:8080 for the PoC.



The success page is a static HTML page served by Spring Boot.



Bonus:





Add logging (e.g., SLF4J) to track key events (email sent, pixel requested, OAuth completed).



Include a README.md with setup instructions and API documentation.

Please provide the complete source code, including all necessary files, wrapped in appropriate <xaiArtifact> tags for each file. Ensure the code is production-ready in terms of structure but simplified for a PoC (e.g., no complex UI, minimal dependencies). Include comments in the code to explain key logic.